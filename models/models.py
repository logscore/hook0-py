# generated by datamodel-codegen:
#   filename:  https://gitlab.com/logscore/public_openapi_specs/-/raw/main/specs/hook0_openapi.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class Application(BaseModel):
    application_id: UUID
    name: str
    organization_id: UUID


class Consumption(BaseModel):
    events_per_day: Optional[int] = None


class Event(Enum):
    ToDo = "ToDo"
    Done = "Done"


class EventType(Enum):
    ToDo = "ToDo"
    Done = "Done"


class Subscription(Enum):
    ToDo = "ToDo"
    Done = "Done"


class OnboardingSteps(BaseModel):
    event: Event
    event_type: EventType
    subscription: Subscription


class Quotas(BaseModel):
    days_of_events_retention_limit: int
    events_per_day_limit: int


class ApplicationInfo(BaseModel):
    application_id: UUID
    consumption: Consumption
    name: str
    onboarding_steps: OnboardingSteps
    organization_id: UUID
    quotas: Quotas


class ApplicationPost(BaseModel):
    name: str
    organization_id: UUID


class ApplicationSecret(BaseModel):
    created_at: datetime
    deleted_at: Optional[datetime] = None
    name: Optional[str] = None
    token: UUID


class ApplicationSecretPost(BaseModel):
    application_id: UUID
    name: Optional[str] = None


class BeginResetPasswordPost(BaseModel):
    email: str


class ChangePasswordPost(BaseModel):
    new_password: str


class EmailVerificationPost(BaseModel):
    token: str


class Event1(BaseModel):
    event_id: UUID
    event_type_name: str
    ip: str
    labels: dict[str, Any]
    metadata: Optional[dict[str, Any]] = None
    occurred_at: datetime
    payload_content_type: str
    received_at: datetime


class EventPost(BaseModel):
    application_id: UUID
    event_id: UUID
    event_type: str
    labels: dict[str, dict[str, Any]]
    metadata: Optional[dict[str, dict[str, Any]]] = None
    occurred_at: datetime
    payload: str
    payload_content_type: str


class EventType1(BaseModel):
    event_type_name: str
    resource_type_name: str
    service_name: str
    verb_name: str


class EventTypePost(BaseModel):
    application_id: UUID
    resource_type: str
    service: str
    verb: str


class EventWithPayload(BaseModel):
    event_id: UUID
    event_type_name: str
    ip: str
    labels: dict[str, Any]
    metadata: Optional[dict[str, Any]] = None
    occurred_at: datetime
    payload: str
    payload_content_type: str
    received_at: datetime


class HealthCheck(BaseModel):
    database: bool


class IngestedEvent(BaseModel):
    application_id: UUID
    event_id: UUID
    received_at: datetime


class Formbricks(BaseModel):
    api_host: str
    environment_id: str


class Matomo(BaseModel):
    site_id: int
    url: str


class InstanceConfig(BaseModel):
    application_secret_compatibility: bool
    auto_db_migration: bool
    biscuit_public_key: str
    cloudflare_turnstile_site_key: Optional[str] = None
    formbricks: Optional[Formbricks] = None
    matomo: Optional[Matomo] = None
    password_minimum_length: int
    quota_enforcement: bool
    registration_disabled: bool
    support_email_address: str


class LoginPost(BaseModel):
    email: str
    password: str


class LoginResponse(BaseModel):
    access_token: str
    access_token_expiration: datetime
    email: str
    first_name: str
    last_name: str
    refresh_token: str
    refresh_token_expiration: datetime
    user_id: UUID


class Plan(BaseModel):
    label: str
    name: str


class Organization(BaseModel):
    name: str
    organization_id: UUID
    plan: Optional[Plan] = None
    role: str


class OrganizationEditRole(BaseModel):
    role: str
    user_id: UUID


class Consumption1(BaseModel):
    applications: Optional[int] = None
    events_per_day: Optional[int] = None
    members: Optional[int] = None


class Application1(Enum):
    ToDo = "ToDo"
    Done = "Done"


class Event2(Enum):
    ToDo = "ToDo"
    Done = "Done"


class EventType2(Enum):
    ToDo = "ToDo"
    Done = "Done"


class OnboardingSteps1(BaseModel):
    application: Application1
    event: Event2
    event_type: EventType2
    subscription: Subscription


class Quotas1(BaseModel):
    applications_per_organization_limit: int
    days_of_events_retention_limit: int
    events_per_day_limit: int
    members_per_organization_limit: int


class User(BaseModel):
    email: str
    first_name: str
    last_name: str
    role: str
    user_id: UUID


class OrganizationInfo(BaseModel):
    consumption: Consumption1
    name: str
    onboarding_steps: OnboardingSteps1
    organization_id: UUID
    plan: Optional[Plan] = None
    quotas: Quotas1
    users: list[User]


class OrganizationPost(BaseModel):
    name: str


class Problem(BaseModel):
    detail: str
    id: str
    status: int
    title: str


class Limits(BaseModel):
    global_applications_per_organization_limit: int
    global_days_of_events_retention_limit: int
    global_event_types_per_application_limit: int
    global_events_per_day_limit: int
    global_members_per_organization_limit: int
    global_subscriptions_per_application_limit: int


class QuotasResponse(BaseModel):
    enabled: bool
    limits: Limits


class Registration(BaseModel):
    organization_id: UUID
    user_id: UUID


class RegistrationPost(BaseModel):
    email: str
    first_name: str
    last_name: str
    password: str
    turnstile_token: Optional[str] = None


class ReplayEvent(BaseModel):
    application_id: UUID


class Subscription2(BaseModel):
    description: Optional[str] = None
    subscription_id: UUID


class RequestAttempt(BaseModel):
    created_at: datetime
    delay_until: Optional[datetime] = None
    event_id: UUID
    failed_at: Optional[datetime] = None
    picked_at: Optional[datetime] = None
    request_attempt_id: UUID
    response_id: Optional[UUID] = None
    retry_count: int
    status: str
    subscription: Subscription2
    succeeded_at: Optional[datetime] = None


class ResetPasswordPost(BaseModel):
    new_password: str
    token: str


class Response(BaseModel):
    body: Optional[str] = None
    elapsed_time_ms: Optional[int] = None
    headers: Optional[dict[str, str]] = None
    http_code: Optional[int] = None
    response_error_name: Optional[str] = None
    response_id: UUID


class Revoke(BaseModel):
    user_id: UUID


class ServiceToken(BaseModel):
    biscuit: str
    created_at: datetime
    name: str
    token_id: UUID


class ServiceTokenPost(BaseModel):
    name: str
    organization_id: UUID


class Target(BaseModel):
    headers: dict[str, Any]
    method: str
    type: Annotated[str, Field(examples=["http"])]
    url: str


class Subscription3(BaseModel):
    application_id: UUID
    created_at: datetime
    dedicated_workers: list[str]
    description: Optional[str] = None
    event_types: list[str]
    is_enabled: bool
    label_key: str
    label_value: str
    metadata: dict[str, dict[str, Any]]
    secret: UUID
    subscription_id: UUID
    target: Target


class SubscriptionPost(BaseModel):
    application_id: UUID
    dedicated_workers: Optional[list[str]] = None
    description: Optional[str] = None
    event_types: list[str]
    is_enabled: bool
    label_key: str
    label_value: str
    metadata: Optional[dict[str, dict[str, Any]]] = None
    target: Target


class UserInvitation(BaseModel):
    email: str
    role: str
